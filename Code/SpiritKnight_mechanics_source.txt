import pygame, sys
from PIL import Image
import time

pygame.init()

info = pygame.display.Info()

# Thông số của cửa sổ pygame
width = info.current_w
height = info.current_h
screen = pygame.display.set_mode((width, height-50))
clock = pygame.time.Clock()

#UI
scale_factor = 0.5
Hp_bar = pygame.image.load('D:/SpiritKnight/Sprites/HP.png').convert_alpha()
Hp_bar = pygame.transform.scale(Hp_bar, (int(Hp_bar.get_width()*scale_factor), int(Hp_bar.get_height()*scale_factor)))
Hp_bar_rect = Hp_bar.get_rect(topleft = (0,0))
Inv = pygame.image.load('D:/SpiritKnight/Sprites/inv.png').convert_alpha()
Inv = pygame.transform.scale(Inv, (int(Inv.get_width()*scale_factor), int(Inv.get_height()*scale_factor)))
Inv_rect = Inv.get_rect(topleft = (0,0))
frame_ui = pygame.image.load('D:/SpiritKnight/Sprites/Frame2.png').convert_alpha()
frame_ui = pygame.transform.scale(frame_ui, (int(frame_ui.get_width()*scale_factor), int(frame_ui.get_height()*scale_factor)))
frame_ui_rect = frame_ui.get_rect(center = (60,750))
charge_ui = pygame.image.load('D:/SpiritKnight/Sprites/Skill icon.png').convert_alpha()
charge_ui = pygame.transform.scale(charge_ui, (int(charge_ui.get_width()*scale_factor), int(charge_ui.get_height()*scale_factor)))
charge_ui_rect = charge_ui.get_rect(center = (60,750))
frame_ui2 = pygame.image.load('D:/SpiritKnight/Sprites/Frame1.png').convert_alpha()
frame_ui2 = pygame.transform.scale(frame_ui2, (int(frame_ui2.get_width()*scale_factor), int(frame_ui2.get_height()*scale_factor)))
frame_ui2_rect = frame_ui2.get_rect(center = (160, 750))
dash_ui = pygame.image.load('D:/SpiritKnight/Sprites/Dash icon.png').convert_alpha()
dash_ui = pygame.transform.scale(dash_ui, (int(dash_ui.get_width()*scale_factor), int(dash_ui.get_height()*scale_factor)))
dash_ui_rect = dash_ui.get_rect(center = (160,750))
cooldown_effect = pygame.image.load('D:/SpiritKnight/Sprites/Skill cooldown.png')
cooldown_effect = pygame.transform.scale(cooldown_effect, (int(cooldown_effect.get_width()*scale_factor), int(cooldown_effect.get_height()*scale_factor)))
cooldown_effect_rect = cooldown_effect.get_rect(center = (60, 750))
cooldown_effect_2 = pygame.image.load('D:/SpiritKnight/Sprites/Dash cooldown.png').convert_alpha()
cooldown_effect_2 = pygame.transform.scale(cooldown_effect_2, (int(cooldown_effect_2.get_width()*scale_factor), int(cooldown_effect_2.get_height()*scale_factor)))
cooldown_effect_2_rect = cooldown_effect_2.get_rect(center = (160,750))


#Load animation stance của goblin 
gif_path_gob = 'D:/SpiritKnight/Sprites/Goblin.gif'
gif_gob = Image.open(gif_path_gob)
frames_gob = []

try: 
    while True:
        frame_gob = gif_gob.copy()
        frame_gob = frame_gob.convert("RGBA")
        frames_gob.append(pygame.image.fromstring(frame_gob.tobytes(), frame_gob.size, frame_gob.mode))
        gif_gob.seek(len(frames_gob))
except EOFError:
    pass

gob_rect = frames_gob[0].get_rect(center=((width//2) - 200, (height//2) ))
frame_gob_index = 0 
gob_frame_counter = 0

# Load animation stance của nhân vật
gif_path = 'D:/SpiritKnight/Sprites/lil dude bigger.gif'
gif = Image.open(gif_path)
frames = []

try:
    while True:
        frame = gif.copy()
        frame = frame.convert("RGBA")
        frames.append(pygame.image.fromstring(frame.tobytes(), frame.size, frame.mode))
        gif.seek(len(frames))  # Di chuyển đến frame tiếp theo
except EOFError:
    pass

# Xoay frame stance nhân vật
flipped_frames = [pygame.transform.flip(frame, True, False) for frame in frames]

# Load sprite_sheet tấn công
attack_sprite_sheet = pygame.image.load('D:/SpiritKnight/Sprites/lil dude big.png').convert_alpha()
attack_frames = []
sprite_width, sprite_height = attack_sprite_sheet.get_width() // 6, attack_sprite_sheet.get_height()

# Assuming 6 frames in the sprite sheet
for i in range(6):
    frame = attack_sprite_sheet.subsurface((i * sprite_width, 0, sprite_width, sprite_height))
    attack_frames.append(frame)

# Xoay frame tấn công
flipped_attack_frames = [pygame.transform.flip(frame, True, False) for frame in attack_frames]

# Load sprite_sheet skill
charge_attack_sprite_sheet = pygame.image.load('D:/SpiritKnight/Sprites/Battery.png').convert_alpha()
charge_attack_frames = []
charge_sprite_width, charge_sprite_height = charge_attack_sprite_sheet.get_width() // 9, charge_attack_sprite_sheet.get_height()

# Assuming 9 frames in the sprite sheet
for i in range(9):
    charge_frame = charge_attack_sprite_sheet.subsurface((i * charge_sprite_width, 0, charge_sprite_width, charge_sprite_height))
    charge_attack_frames.append(charge_frame)

# Xoay frame skill
flipped_charge_attack_frames = [pygame.transform.flip(charge_frame, True, False) for charge_frame in charge_attack_frames]

# Load sprite_sheet chạy
run_sprite_sheet = pygame.image.load('D:/SpiritKnight/Sprites/running.png').convert_alpha()
run_frames = []
run_width, run_height = run_sprite_sheet.get_width() // 8, run_sprite_sheet.get_height()

# Assuming 8 frames in the sprite sheet
for i in range(8):
    run_frame = run_sprite_sheet.subsurface((i * run_width, 0, run_width, run_height))
    run_frames.append(run_frame)

# Xoay frame chạy
flipped_run_frames = [pygame.transform.flip(run_frame, True, False) for run_frame in run_frames]

# Load sprite sheet lướt
dash_sprite_sheet = pygame.image.load('D:/SpiritKnight/Sprites/Dash.png').convert_alpha()
dash_frames = []
dash_width, dash_height = dash_sprite_sheet.get_width() // 8, dash_sprite_sheet.get_height()

# Assuming 6 frames in the sprite sheet
for i in range(8):
    dash_frame = dash_sprite_sheet.subsurface((i * dash_width, 0, dash_width, dash_height))
    dash_frames.append(dash_frame)

# Xoay frame lướt
flipped_dash_frames = [pygame.transform.flip(dash_frame, True, False) for dash_frame in dash_frames]

# Thông số nhân vật
character_rect = frames[0].get_rect(center=(width // 2, height // 2))
hitbox = character_rect.copy()
hitbox.inflate_ip(-27,-27)
frame_index = 0
run_frame_index = 0
attack_frame_index = 0
charge_frame_index = 0
dash_frame_index = 0
flipped = False
attacking = False
charging = False
running = False
dashing = False
charge_cooldown = False
dash_cooldown = False

charge_cooldown_time = 2  # Thời gian cooldown charge (giây)
dash_cooldown_time = 1.5  # Thời gian cooldown lướt (giây)
last_charge_time = 0
last_dash_time = 0

# Biến đếm frame
frame_counter = 0
run_frame_counter = 0
attack_frame_counter = 0
charge_frame_counter = 0
dash_frame_counter = 0

# Tốc độ frame cập nhật
frame_update_rate = 5
attack_frame_update_rate = 2
charge_frame_update_rate = 4
dash_frame_update_rate = 2
dash_duration = len(dash_frames)
dash_speed = 10

goblin_hit_count = 0

collision = False

while True:
    screen.fill((0, 0, 0))  # Fill màn hình màu đen

    #Goblin
    if goblin_hit_count < 3:
        gob_frame_counter += 1
        if gob_frame_counter >= frame_update_rate:
            gob_frame_counter = 0
            frame_gob_index = (frame_gob_index +1) % len(frames_gob)
        screen.blit(frames_gob[frame_gob_index], gob_rect)
        pygame.draw.rect(screen, (0, 255, 0), gob_rect, 2)  # Hitbox goblin (màu xanh lá)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.MOUSEBUTTONDOWN:  # Chuột nhấn
            if event.button == 1:  # Chuột trái
                attacking = True
                attack_frame_index = 0
                attack_frame_counter = 0
                if hitbox.colliderect(gob_rect):
                    goblin_hit_count += 1
            elif event.button == 3 and not charge_cooldown:  # Chuột phải
                charging = True
                charge_frame_index = 0
                charge_frame_counter = 0
                charge_cooldown = True
                last_charge_time = time.time()

    if goblin_hit_count >= 3:
        gob_rect.topleft = (-1000,-1000)

    keys = pygame.key.get_pressed()
    running = False

    # Xử lý phím di chuyển
    if keys[pygame.K_a]:
        character_rect.x -= 5
        running = True
        flipped = False
    if keys[pygame.K_d]:
        character_rect.x += 5
        running = True
        flipped = True
    if keys[pygame.K_w]:
        character_rect.y -= 5
        running = True
    if keys[pygame.K_s]:
        character_rect.y += 5
        running = True

    # Cập nhật hitbox theo vị trí nhân vật
    hitbox.center = character_rect.center

    # Kiểm tra va chạm giữa hitbox của nhân vật và goblin
    collision = hitbox.colliderect(gob_rect)

    # Vẽ hitbox (chỉ để kiểm tra, có thể xóa khi phát hành)
    pygame.draw.rect(screen, (255, 0, 0), hitbox, 2)  # Hitbox nhân vật (màu đỏ)

    if collision: 
         pygame.draw.rect(screen, (255, 255, 0), gob_rect, 2)  # Đổi màu hitbox của goblin để báo hiệu

    # Kích hoạt lướt
    if keys[pygame.K_LSHIFT] and not dashing and not dash_cooldown:
        dashing = True
        dash_frame_index = 0
        dash_frame_counter = 0
        last_dash_time = time.time()
        dash_cooldown = True

    # Logic animation
    if dashing:
        if flipped:
            screen.blit(flipped_dash_frames[dash_frame_index], character_rect)
        else:
            screen.blit(dash_frames[dash_frame_index], character_rect)
        dash_frame_counter += 1
        if dash_frame_counter >= dash_frame_update_rate:
            dash_frame_counter = 0
            dash_frame_index = (dash_frame_index + 1) % len(dash_frames)

        # Di chuyển nhanh khi lướt
        if flipped:
            character_rect.x += dash_speed
        else:
            character_rect.x -= dash_speed

        # Kết thúc lướt
        if dash_frame_index == len(dash_frames)-1:
            dashing = False

    elif charging:
        if flipped:
            screen.blit(flipped_charge_attack_frames[charge_frame_index], character_rect)
        else:
            screen.blit(charge_attack_frames[charge_frame_index], character_rect)
        charge_frame_counter += 1
        if charge_frame_counter >= charge_frame_update_rate:
            charge_frame_counter = 0
            charge_frame_index += 1
        if charge_frame_index >= len(charge_attack_frames):
            charging = False

    elif attacking:
        if flipped:
            screen.blit(flipped_attack_frames[attack_frame_index], character_rect)
        else:
            screen.blit(attack_frames[attack_frame_index], character_rect)
        attack_frame_counter += 1
        if attack_frame_counter >= attack_frame_update_rate:
            attack_frame_counter = 0
            attack_frame_index += 1
        if attack_frame_index >= len(attack_frames):
            attacking = False

    elif running:
        if flipped:
            screen.blit(flipped_run_frames[run_frame_index], character_rect)
        else:
            screen.blit(run_frames[run_frame_index], character_rect)
        run_frame_counter += 1
        if run_frame_counter >= frame_update_rate: 
            run_frame_counter = 0
            run_frame_index = (run_frame_index + 1) % len(run_frames)

    else:
        frame_counter += 1
        if frame_counter >= frame_update_rate:
            frame_counter = 0
            frame_index = (frame_index + 1) % len(frames)
        if flipped:
            screen.blit(flipped_frames[frame_index], character_rect)
        else:
            screen.blit(frames[frame_index], character_rect)
    
    screen.blit(charge_ui, charge_ui_rect)
    screen.blit(dash_ui, dash_ui_rect)


    # Xử lý cooldown
    if charge_cooldown:
        charge_elapsed_time = time.time() - last_charge_time
        charge_cooldown_ratio = charge_elapsed_time / charge_cooldown_time

        # Hiển thị thanh cooldown trên kỹ năng charge
        cooldown_height = int(cooldown_effect_rect.height * (1 - charge_cooldown_ratio))
        if cooldown_height > 0:
            charge_cooldown_rect = pygame.Rect(cooldown_effect_rect.left, cooldown_effect_rect.top, cooldown_effect_rect.width, cooldown_height)
            cooldown_effect_partial = cooldown_effect.subsurface((0, 0, cooldown_effect_rect.width, cooldown_height))
            screen.blit(cooldown_effect_partial, charge_cooldown_rect)

        if charge_elapsed_time >= charge_cooldown_time:
            charge_cooldown = False

    if dash_cooldown:
        dash_elapsed_time = time.time() - last_dash_time
        dash_cooldown_ratio = dash_elapsed_time / dash_cooldown_time

        # Hiển thị thanh cooldown trên kỹ năng dash
        cooldown_height_2 = int(cooldown_effect_2_rect.height * (1 - dash_cooldown_ratio))
        if cooldown_height_2 > 0:
            dash_cooldown_rect = pygame.Rect(frame_ui2_rect.left, frame_ui2_rect.top, cooldown_effect_2_rect.width, cooldown_height_2)
            cooldown_effect_partial_2 = cooldown_effect_2.subsurface((0, 0, cooldown_effect_2_rect.width, cooldown_height_2))
            screen.blit(cooldown_effect_partial_2, dash_cooldown_rect)

        if dash_elapsed_time >= dash_cooldown_time:
            dash_cooldown = False

    screen.blit(Hp_bar, Hp_bar_rect.topleft)
    screen.blit(Inv, Inv_rect.topleft)
    screen.blit(frame_ui, frame_ui_rect)
    screen.blit(frame_ui2, frame_ui2_rect)

    pygame.display.update()
    clock.tick(60)